# server port
server.port=${spanprints.auth-service.server.port:8090}

#Service Id
spring.application.name=SpanPrintsAuthService

# Eureka-client configuration start
#Instance Id
eureka.instance.instance-id=${spring.application.name}:${random.value}

#Eureka location
eureka.client.service-url.defaultZone=${spanprints.service-registry.server.url:http://localhost:8761/eureka}

#Option 1: Force IP address instead of hostname
#This tells Eureka to register your service using your actual IP instead of the PC name.
eureka.instance.prefer-ip-address=false

#Option 2: Set a fixed hostname manually
#Use this only in local development. It breaks things in distributed environments where localhost refers to the service itself.
#eureka.instance.hostname=127.0.0.1
# Eureka-client configuration end

# Config-client configuration start
spring.config.import=optional:configserver:http://localhost:8888
#If configuration is not required add spring.config.import=optional:configserver: instead.
#To disable this check, set spring.cloud.config.enabled=false or  spring.cloud.config.import-check.enabled=false.

#spring.cloud.config.fail-fast=false (default)
#spring.cloud.config.fail-fast=true

# refresh scope related settings
management.endpoints.web.exposure.include=*
# Config-client configuration end


# Database configuration start
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://localhost:5432/SpanPrintsAuthService
spring.datasource.username=postgres
spring.datasource.password=1234
# Database configuration end

# Hibernate configurations start
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
# Hibernate configurations end